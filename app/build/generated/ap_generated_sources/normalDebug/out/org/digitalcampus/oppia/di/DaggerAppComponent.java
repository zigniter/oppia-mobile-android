// Generated by Dagger (https://dagger.dev).
package org.digitalcampus.oppia.di;

import android.content.SharedPreferences;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.digitalcampus.oppia.activity.ActivityLogActivity;
import org.digitalcampus.oppia.activity.ActivityLogActivity_MembersInjector;
import org.digitalcampus.oppia.activity.AppActivity;
import org.digitalcampus.oppia.activity.AppActivity_MembersInjector;
import org.digitalcampus.oppia.activity.ChangePasswordActivity;
import org.digitalcampus.oppia.activity.ChangePasswordActivity_MembersInjector;
import org.digitalcampus.oppia.activity.CourseIndexActivity;
import org.digitalcampus.oppia.activity.CourseIndexActivity_MembersInjector;
import org.digitalcampus.oppia.activity.CourseQuizAttemptsActivity;
import org.digitalcampus.oppia.activity.CourseQuizAttemptsActivity_MembersInjector;
import org.digitalcampus.oppia.activity.DownloadActivity;
import org.digitalcampus.oppia.activity.DownloadActivity_MembersInjector;
import org.digitalcampus.oppia.activity.DownloadMediaActivity;
import org.digitalcampus.oppia.activity.DownloadMediaActivity_MembersInjector;
import org.digitalcampus.oppia.activity.EditProfileActivity;
import org.digitalcampus.oppia.activity.EditProfileActivity_MembersInjector;
import org.digitalcampus.oppia.activity.MainActivity;
import org.digitalcampus.oppia.activity.MainActivity_MembersInjector;
import org.digitalcampus.oppia.activity.PrefsActivity;
import org.digitalcampus.oppia.activity.PrefsActivity_MembersInjector;
import org.digitalcampus.oppia.activity.QuizAttemptActivity;
import org.digitalcampus.oppia.activity.QuizAttemptActivity_MembersInjector;
import org.digitalcampus.oppia.activity.StartUpActivity;
import org.digitalcampus.oppia.activity.StartUpActivity_MembersInjector;
import org.digitalcampus.oppia.activity.TagSelectActivity;
import org.digitalcampus.oppia.activity.TagSelectActivity_MembersInjector;
import org.digitalcampus.oppia.activity.ViewDigestActivity;
import org.digitalcampus.oppia.activity.ViewDigestActivity_MembersInjector;
import org.digitalcampus.oppia.activity.WelcomeActivity;
import org.digitalcampus.oppia.activity.WelcomeActivity_MembersInjector;
import org.digitalcampus.oppia.analytics.AnalyticsProvider;
import org.digitalcampus.oppia.api.ApiEndpoint;
import org.digitalcampus.oppia.application.AdminSecurityManager;
import org.digitalcampus.oppia.application.AdminSecurityManager_MembersInjector;
import org.digitalcampus.oppia.application.App;
import org.digitalcampus.oppia.database.DBDataMigration;
import org.digitalcampus.oppia.database.DBDataMigration_MembersInjector;
import org.digitalcampus.oppia.fragments.ActivitiesFragment;
import org.digitalcampus.oppia.fragments.ActivitiesFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.AppFragment;
import org.digitalcampus.oppia.fragments.AppFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.BadgesFragment;
import org.digitalcampus.oppia.fragments.BadgesFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.CoursesListFragment;
import org.digitalcampus.oppia.fragments.CoursesListFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.GlobalQuizAttemptsFragment;
import org.digitalcampus.oppia.fragments.GlobalQuizAttemptsFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.GlobalScorecardFragment;
import org.digitalcampus.oppia.fragments.GlobalScorecardFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.LeaderboardFragment;
import org.digitalcampus.oppia.fragments.LeaderboardFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.LoginFragment;
import org.digitalcampus.oppia.fragments.LoginFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.PointsFragment;
import org.digitalcampus.oppia.fragments.PointsFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.RegisterFragment;
import org.digitalcampus.oppia.fragments.RegisterFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.RememberUsernameFragment;
import org.digitalcampus.oppia.fragments.RememberUsernameFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.ResetPasswordFragment;
import org.digitalcampus.oppia.fragments.ResetPasswordFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.prefs.AdvancedPrefsFragment;
import org.digitalcampus.oppia.fragments.prefs.AdvancedPrefsFragment_MembersInjector;
import org.digitalcampus.oppia.fragments.prefs.NotificationsPrefsFragment;
import org.digitalcampus.oppia.fragments.prefs.NotificationsPrefsFragment_MembersInjector;
import org.digitalcampus.oppia.model.ActivityLogRepository;
import org.digitalcampus.oppia.model.CompleteCourseProvider;
import org.digitalcampus.oppia.model.CourseInstallRepository;
import org.digitalcampus.oppia.model.CoursesRepository;
import org.digitalcampus.oppia.model.QuizAttemptRepository;
import org.digitalcampus.oppia.model.TagRepository;
import org.digitalcampus.oppia.model.TrackerLogRepository;
import org.digitalcampus.oppia.model.User;
import org.digitalcampus.oppia.service.CoursesChecksWorkerManager;
import org.digitalcampus.oppia.service.CoursesChecksWorkerManager_MembersInjector;
import org.digitalcampus.oppia.service.CoursesCompletionReminderWorkerManager;
import org.digitalcampus.oppia.service.CoursesCompletionReminderWorkerManager_MembersInjector;
import org.digitalcampus.oppia.service.DownloadServiceDelegate;
import org.digitalcampus.oppia.service.courseinstall.CourseInstallerServiceDelegate;
import org.digitalcampus.oppia.widgets.AnswerWidget;
import org.digitalcampus.oppia.widgets.AnswerWidget_MembersInjector;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private final DaggerAppComponent appComponent = this;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<CoursesRepository> provideCoursesRepositoryProvider;

  private Provider<CompleteCourseProvider> provideCompleteCourseProvider;

  private Provider<TagRepository> provideTagRepositoryProvider;

  private Provider<ApiEndpoint> provideApiEndpointProvider;

  private Provider<CourseInstallerServiceDelegate> provideCourseInstallerServiceDelegateProvider;

  private Provider<ActivityLogRepository> provideActivityLogRepositoryProvider;

  private Provider<CourseInstallRepository> provideCourseInstallRepositoryProvider;

  private Provider<DownloadServiceDelegate> provideDownloadServiceDelegateProvider;

  private Provider<QuizAttemptRepository> provideQuizAttemptRepositoryProvider;

  private Provider<AnalyticsProvider> provideAnalyticsProvider;

  private Provider<TrackerLogRepository> provideTrackerLogRepositoryProvider;

  private DaggerAppComponent(AppModule appModuleParam) {
    this.appModule = appModuleParam;
    initialize(appModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam) {
    this.provideSharedPreferencesProvider = DoubleCheck.provider(AppModule_ProvideSharedPreferencesFactory.create(appModuleParam));
    this.provideCoursesRepositoryProvider = DoubleCheck.provider(AppModule_ProvideCoursesRepositoryFactory.create(appModuleParam));
    this.provideCompleteCourseProvider = DoubleCheck.provider(AppModule_ProvideCompleteCourseProviderFactory.create(appModuleParam));
    this.provideTagRepositoryProvider = DoubleCheck.provider(AppModule_ProvideTagRepositoryFactory.create(appModuleParam));
    this.provideApiEndpointProvider = DoubleCheck.provider(AppModule_ProvideApiEndpointFactory.create(appModuleParam));
    this.provideCourseInstallerServiceDelegateProvider = DoubleCheck.provider(AppModule_ProvideCourseInstallerServiceDelegateFactory.create(appModuleParam));
    this.provideActivityLogRepositoryProvider = DoubleCheck.provider(AppModule_ProvideActivityLogRepositoryFactory.create(appModuleParam));
    this.provideCourseInstallRepositoryProvider = DoubleCheck.provider(AppModule_ProvideCourseInstallRepositoryFactory.create(appModuleParam));
    this.provideDownloadServiceDelegateProvider = DoubleCheck.provider(AppModule_ProvideDownloadServiceDelegateFactory.create(appModuleParam));
    this.provideQuizAttemptRepositoryProvider = DoubleCheck.provider(AppModule_ProvideQuizAttemptRepositoryFactory.create(appModuleParam));
    this.provideAnalyticsProvider = DoubleCheck.provider(AppModule_ProvideAnalyticsProviderFactory.create(appModuleParam));
    this.provideTrackerLogRepositoryProvider = DoubleCheck.provider(AppModule_ProvideTrackerLogRepositoryFactory.create(appModuleParam));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @Override
  public void inject(CourseIndexActivity activity) {
    injectCourseIndexActivity(activity);
  }

  @Override
  public void inject(TagSelectActivity activity) {
    injectTagSelectActivity(activity);
  }

  @Override
  public void inject(ViewDigestActivity activity) {
    injectViewDigestActivity(activity);
  }

  @Override
  public void inject(ActivityLogActivity activity) {
    injectActivityLogActivity(activity);
  }

  @Override
  public void inject(DownloadActivity activity) {
    injectDownloadActivity(activity);
  }

  @Override
  public void inject(DownloadMediaActivity activity) {
    injectDownloadMediaActivity(activity);
  }

  @Override
  public void inject(AppActivity activity) {
    injectAppActivity(activity);
  }

  @Override
  public void inject(PrefsActivity activity) {
    injectPrefsActivity(activity);
  }

  @Override
  public void inject(CourseQuizAttemptsActivity activity) {
    injectCourseQuizAttemptsActivity(activity);
  }

  @Override
  public void inject(LoginFragment fragment) {
    injectLoginFragment(fragment);
  }

  @Override
  public void inject(ResetPasswordFragment fragment) {
    injectResetPasswordFragment(fragment);
  }

  @Override
  public void inject(RememberUsernameFragment fragment) {
    injectRememberUsernameFragment(fragment);
  }

  @Override
  public void inject(GlobalScorecardFragment fragment) {
    injectGlobalScorecardFragment(fragment);
  }

  @Override
  public void inject(PointsFragment fragment) {
    injectPointsFragment(fragment);
  }

  @Override
  public void inject(LeaderboardFragment fragment) {
    injectLeaderboardFragment(fragment);
  }

  @Override
  public void inject(ActivitiesFragment fragment) {
    injectActivitiesFragment(fragment);
  }

  @Override
  public void inject(BadgesFragment fragment) {
    injectBadgesFragment(fragment);
  }

  @Override
  public void inject(CoursesListFragment fragment) {
    injectCoursesListFragment(fragment);
  }

  @Override
  public void inject(AppFragment fragment) {
    injectAppFragment(fragment);
  }

  @Override
  public void inject(GlobalQuizAttemptsFragment fragment) {
    injectGlobalQuizAttemptsFragment(fragment);
  }

  @Override
  public void inject(RegisterFragment fragment) {
    injectRegisterFragment(fragment);
  }

  @Override
  public void inject(App app) {
  }

  @Override
  public void inject(ChangePasswordActivity activity) {
    injectChangePasswordActivity(activity);
  }

  @Override
  public void inject(QuizAttemptActivity activity) {
    injectQuizAttemptActivity(activity);
  }

  @Override
  public void inject(WelcomeActivity activity) {
    injectWelcomeActivity(activity);
  }

  @Override
  public void inject(StartUpActivity activity) {
    injectStartUpActivity(activity);
  }

  @Override
  public void inject(AdvancedPrefsFragment advancedPrefsFragment) {
    injectAdvancedPrefsFragment(advancedPrefsFragment);
  }

  @Override
  public void inject(NotificationsPrefsFragment notificationsPrefsFragment) {
    injectNotificationsPrefsFragment(notificationsPrefsFragment);
  }

  @Override
  public void inject(AnswerWidget fragment) {
    injectAnswerWidget(fragment);
  }

  @Override
  public void inject(EditProfileActivity activity) {
    injectEditProfileActivity(activity);
  }

  @Override
  public void inject(AdminSecurityManager adminSecurityManager) {
    injectAdminSecurityManager(adminSecurityManager);
  }

  @Override
  public void inject(CoursesChecksWorkerManager coursesChecksWorkerManager) {
    injectCoursesChecksWorkerManager(coursesChecksWorkerManager);
  }

  @Override
  public void inject(
      CoursesCompletionReminderWorkerManager coursesCompletionReminderWorkerManager) {
    injectCoursesCompletionReminderWorkerManager(coursesCompletionReminderWorkerManager);
  }

  @Override
  public void inject(DBDataMigration dbDataMigration) {
    injectDBDataMigration(dbDataMigration);
  }

  @Override
  public User getUser() {
    return AppModule_ProvideUserFactory.provideUser(appModule);
  }

  @CanIgnoreReturnValue
  private MainActivity injectMainActivity(MainActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    MainActivity_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CourseIndexActivity injectCourseIndexActivity(CourseIndexActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    CourseIndexActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    CourseIndexActivity_MembersInjector.injectCompleteCourseProvider(instance, provideCompleteCourseProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private TagSelectActivity injectTagSelectActivity(TagSelectActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    TagSelectActivity_MembersInjector.injectTagRepository(instance, provideTagRepositoryProvider.get());
    TagSelectActivity_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ViewDigestActivity injectViewDigestActivity(ViewDigestActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    ViewDigestActivity_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    ViewDigestActivity_MembersInjector.injectUser(instance, AppModule_ProvideUserFactory.provideUser(appModule));
    ViewDigestActivity_MembersInjector.injectCourseInstallerServiceDelegate(instance, provideCourseInstallerServiceDelegateProvider.get());
    ViewDigestActivity_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ActivityLogActivity injectActivityLogActivity(ActivityLogActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    ActivityLogActivity_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    ActivityLogActivity_MembersInjector.injectLogsRepository(instance, provideActivityLogRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DownloadActivity injectDownloadActivity(DownloadActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    DownloadActivity_MembersInjector.injectCourseInstallRepository(instance, provideCourseInstallRepositoryProvider.get());
    DownloadActivity_MembersInjector.injectCourseInstallerServiceDelegate(instance, provideCourseInstallerServiceDelegateProvider.get());
    DownloadActivity_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DownloadMediaActivity injectDownloadMediaActivity(DownloadMediaActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    DownloadMediaActivity_MembersInjector.injectDownloadServiceDelegate(instance, provideDownloadServiceDelegateProvider.get());
    DownloadMediaActivity_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AppActivity injectAppActivity(AppActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrefsActivity injectPrefsActivity(PrefsActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    PrefsActivity_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CourseQuizAttemptsActivity injectCourseQuizAttemptsActivity(
      CourseQuizAttemptsActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    CourseQuizAttemptsActivity_MembersInjector.injectAttemptsRepository(instance, provideQuizAttemptRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginFragment injectLoginFragment(LoginFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    LoginFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ResetPasswordFragment injectResetPasswordFragment(ResetPasswordFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    ResetPasswordFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private RememberUsernameFragment injectRememberUsernameFragment(
      RememberUsernameFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    RememberUsernameFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GlobalScorecardFragment injectGlobalScorecardFragment(GlobalScorecardFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    GlobalScorecardFragment_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    GlobalScorecardFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PointsFragment injectPointsFragment(PointsFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    PointsFragment_MembersInjector.injectPointsFull(instance, AppModule_ProvidePointsListFactory.providePointsList(appModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private LeaderboardFragment injectLeaderboardFragment(LeaderboardFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    LeaderboardFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ActivitiesFragment injectActivitiesFragment(ActivitiesFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    ActivitiesFragment_MembersInjector.injectPointsFull(instance, AppModule_ProvidePointsListFactory.providePointsList(appModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private BadgesFragment injectBadgesFragment(BadgesFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    BadgesFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    BadgesFragment_MembersInjector.injectBadges(instance, AppModule_ProvideBadgesListFactory.provideBadgesList(appModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private CoursesListFragment injectCoursesListFragment(CoursesListFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    CoursesListFragment_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    CoursesListFragment_MembersInjector.injectSharedPrefs(instance, provideSharedPreferencesProvider.get());
    CoursesListFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AppFragment injectAppFragment(AppFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GlobalQuizAttemptsFragment injectGlobalQuizAttemptsFragment(
      GlobalQuizAttemptsFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    GlobalQuizAttemptsFragment_MembersInjector.injectAttemptsRepository(instance, provideQuizAttemptRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
    AppFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    RegisterFragment_MembersInjector.injectCustomFieldsRepo(instance, AppModule_ProvideProfileCustomFieldsListFactory.provideProfileCustomFieldsList(appModule));
    RegisterFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ChangePasswordActivity injectChangePasswordActivity(ChangePasswordActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    ChangePasswordActivity_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    ChangePasswordActivity_MembersInjector.injectUser(instance, AppModule_ProvideUserFactory.provideUser(appModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private QuizAttemptActivity injectQuizAttemptActivity(QuizAttemptActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    QuizAttemptActivity_MembersInjector.injectAttemptsRepository(instance, provideQuizAttemptRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private WelcomeActivity injectWelcomeActivity(WelcomeActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    WelcomeActivity_MembersInjector.injectAnalyticsProvider(instance, provideAnalyticsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StartUpActivity injectStartUpActivity(StartUpActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    StartUpActivity_MembersInjector.injectAnalyticsProvider(instance, provideAnalyticsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AdvancedPrefsFragment injectAdvancedPrefsFragment(AdvancedPrefsFragment instance) {
    AdvancedPrefsFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    AdvancedPrefsFragment_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsPrefsFragment injectNotificationsPrefsFragment(
      NotificationsPrefsFragment instance) {
    NotificationsPrefsFragment_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AnswerWidget injectAnswerWidget(AnswerWidget instance) {
    AnswerWidget_MembersInjector.injectAttemptsRepository(instance, provideQuizAttemptRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EditProfileActivity injectEditProfileActivity(EditProfileActivity instance) {
    AppActivity_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    EditProfileActivity_MembersInjector.injectApiEndpoint(instance, provideApiEndpointProvider.get());
    EditProfileActivity_MembersInjector.injectUser(instance, AppModule_ProvideUserFactory.provideUser(appModule));
    EditProfileActivity_MembersInjector.injectCustomFieldsRepo(instance, AppModule_ProvideProfileCustomFieldsListFactory.provideProfileCustomFieldsList(appModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private AdminSecurityManager injectAdminSecurityManager(AdminSecurityManager instance) {
    AdminSecurityManager_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CoursesChecksWorkerManager injectCoursesChecksWorkerManager(
      CoursesChecksWorkerManager instance) {
    CoursesChecksWorkerManager_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    CoursesChecksWorkerManager_MembersInjector.injectUser(instance, AppModule_ProvideUserFactory.provideUser(appModule));
    CoursesChecksWorkerManager_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CoursesCompletionReminderWorkerManager injectCoursesCompletionReminderWorkerManager(
      CoursesCompletionReminderWorkerManager instance) {
    CoursesCompletionReminderWorkerManager_MembersInjector.injectTrackerLogRepository(instance, provideTrackerLogRepositoryProvider.get());
    CoursesCompletionReminderWorkerManager_MembersInjector.injectCoursesRepository(instance, provideCoursesRepositoryProvider.get());
    CoursesCompletionReminderWorkerManager_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DBDataMigration injectDBDataMigration(DBDataMigration instance) {
    DBDataMigration_MembersInjector.injectPrefs(instance, provideSharedPreferencesProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      return new DaggerAppComponent(appModule);
    }
  }
}
