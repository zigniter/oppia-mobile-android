// Generated by view binder compiler. Do not edit!
package org.digitalcampus.mobile.learning.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.digitalcampus.mobile.learning.R;
import org.digitalcampus.oppia.utils.course_status.CourseStatusBadgeView;

public final class RowCourseDownloadBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView courseAuthor;

  @NonNull
  public final TextView courseDescription;

  @NonNull
  public final RelativeLayout courseRow;

  @NonNull
  public final TextView courseTitle;

  @NonNull
  public final ImageButton downloadCourseBtn;

  @NonNull
  public final ProgressBar downloadProgress;

  @NonNull
  public final TextView labelAuthor;

  @NonNull
  public final LinearLayout tagRow;

  @NonNull
  public final CourseStatusBadgeView viewCourseStatus;

  @NonNull
  public final LinearLayout viewTitleAndBadge;

  private RowCourseDownloadBinding(@NonNull LinearLayout rootView, @NonNull TextView courseAuthor,
      @NonNull TextView courseDescription, @NonNull RelativeLayout courseRow,
      @NonNull TextView courseTitle, @NonNull ImageButton downloadCourseBtn,
      @NonNull ProgressBar downloadProgress, @NonNull TextView labelAuthor,
      @NonNull LinearLayout tagRow, @NonNull CourseStatusBadgeView viewCourseStatus,
      @NonNull LinearLayout viewTitleAndBadge) {
    this.rootView = rootView;
    this.courseAuthor = courseAuthor;
    this.courseDescription = courseDescription;
    this.courseRow = courseRow;
    this.courseTitle = courseTitle;
    this.downloadCourseBtn = downloadCourseBtn;
    this.downloadProgress = downloadProgress;
    this.labelAuthor = labelAuthor;
    this.tagRow = tagRow;
    this.viewCourseStatus = viewCourseStatus;
    this.viewTitleAndBadge = viewTitleAndBadge;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RowCourseDownloadBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowCourseDownloadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_course_download, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowCourseDownloadBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.course_author;
      TextView courseAuthor = ViewBindings.findChildViewById(rootView, id);
      if (courseAuthor == null) {
        break missingId;
      }

      id = R.id.course_description;
      TextView courseDescription = ViewBindings.findChildViewById(rootView, id);
      if (courseDescription == null) {
        break missingId;
      }

      id = R.id.course_row;
      RelativeLayout courseRow = ViewBindings.findChildViewById(rootView, id);
      if (courseRow == null) {
        break missingId;
      }

      id = R.id.course_title;
      TextView courseTitle = ViewBindings.findChildViewById(rootView, id);
      if (courseTitle == null) {
        break missingId;
      }

      id = R.id.download_course_btn;
      ImageButton downloadCourseBtn = ViewBindings.findChildViewById(rootView, id);
      if (downloadCourseBtn == null) {
        break missingId;
      }

      id = R.id.download_progress;
      ProgressBar downloadProgress = ViewBindings.findChildViewById(rootView, id);
      if (downloadProgress == null) {
        break missingId;
      }

      id = R.id.label_author;
      TextView labelAuthor = ViewBindings.findChildViewById(rootView, id);
      if (labelAuthor == null) {
        break missingId;
      }

      LinearLayout tagRow = (LinearLayout) rootView;

      id = R.id.view_course_status;
      CourseStatusBadgeView viewCourseStatus = ViewBindings.findChildViewById(rootView, id);
      if (viewCourseStatus == null) {
        break missingId;
      }

      id = R.id.view_title_and_badge;
      LinearLayout viewTitleAndBadge = ViewBindings.findChildViewById(rootView, id);
      if (viewTitleAndBadge == null) {
        break missingId;
      }

      return new RowCourseDownloadBinding((LinearLayout) rootView, courseAuthor, courseDescription,
          courseRow, courseTitle, downloadCourseBtn, downloadProgress, labelAuthor, tagRow,
          viewCourseStatus, viewTitleAndBadge);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
