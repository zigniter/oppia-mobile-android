// Generated by view binder compiler. Do not edit!
package org.digitalcampus.mobile.learning.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.mikephil.charting.charts.LineChart;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.digitalcampus.mobile.learning.R;

public final class FragmentPointsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LineChart chart;

  @NonNull
  public final RecyclerView recyclerPoints;

  @NonNull
  public final TabLayout tabsFilterPoints;

  @NonNull
  public final TextView tvTotalPoints;

  private FragmentPointsBinding(@NonNull LinearLayout rootView, @NonNull LineChart chart,
      @NonNull RecyclerView recyclerPoints, @NonNull TabLayout tabsFilterPoints,
      @NonNull TextView tvTotalPoints) {
    this.rootView = rootView;
    this.chart = chart;
    this.recyclerPoints = recyclerPoints;
    this.tabsFilterPoints = tabsFilterPoints;
    this.tvTotalPoints = tvTotalPoints;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPointsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPointsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_points, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPointsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chart;
      LineChart chart = ViewBindings.findChildViewById(rootView, id);
      if (chart == null) {
        break missingId;
      }

      id = R.id.recycler_points;
      RecyclerView recyclerPoints = ViewBindings.findChildViewById(rootView, id);
      if (recyclerPoints == null) {
        break missingId;
      }

      id = R.id.tabs_filter_points;
      TabLayout tabsFilterPoints = ViewBindings.findChildViewById(rootView, id);
      if (tabsFilterPoints == null) {
        break missingId;
      }

      id = R.id.tv_total_points;
      TextView tvTotalPoints = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalPoints == null) {
        break missingId;
      }

      return new FragmentPointsBinding((LinearLayout) rootView, chart, recyclerPoints,
          tabsFilterPoints, tvTotalPoints);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
