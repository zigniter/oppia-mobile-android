// Generated by view binder compiler. Do not edit!
package org.digitalcampus.mobile.learning.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.digitalcampus.mobile.learning.R;

public final class ActivitySyncBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RecyclerView activitylogsList;

  @NonNull
  public final AppCompatImageView bluetoothIc;

  @NonNull
  public final Button connectBtn;

  @NonNull
  public final LinearLayout connectedPanel;

  @NonNull
  public final RecyclerView courseBackupsList;

  @NonNull
  public final RelativeLayout notConnectedInfo;

  @NonNull
  public final FrameLayout permissionsExplanation;

  @NonNull
  public final ProgressBar progressBar6;

  @NonNull
  public final RelativeLayout receivingProgress;

  @NonNull
  public final Button sendAllButton;

  @NonNull
  public final ProgressBar sendTransferProgress;

  @NonNull
  public final TextView statusSubtitle;

  @NonNull
  public final TextView statusTitle;

  @NonNull
  public final TabLayout tabsFilter;

  @NonNull
  public final ImageButton tetheringBtn;

  @NonNull
  public final TextView textView21;

  @NonNull
  public final TextView textView25;

  @NonNull
  public final TextView textView27;

  @NonNull
  public final ToolbarBinding toolbar;

  @NonNull
  public final TextView transferPendingFiles;

  @NonNull
  public final TextView transferPendingSize;

  @NonNull
  public final TextView tvDeviceName;

  private ActivitySyncBinding(@NonNull LinearLayout rootView,
      @NonNull RecyclerView activitylogsList, @NonNull AppCompatImageView bluetoothIc,
      @NonNull Button connectBtn, @NonNull LinearLayout connectedPanel,
      @NonNull RecyclerView courseBackupsList, @NonNull RelativeLayout notConnectedInfo,
      @NonNull FrameLayout permissionsExplanation, @NonNull ProgressBar progressBar6,
      @NonNull RelativeLayout receivingProgress, @NonNull Button sendAllButton,
      @NonNull ProgressBar sendTransferProgress, @NonNull TextView statusSubtitle,
      @NonNull TextView statusTitle, @NonNull TabLayout tabsFilter,
      @NonNull ImageButton tetheringBtn, @NonNull TextView textView21, @NonNull TextView textView25,
      @NonNull TextView textView27, @NonNull ToolbarBinding toolbar,
      @NonNull TextView transferPendingFiles, @NonNull TextView transferPendingSize,
      @NonNull TextView tvDeviceName) {
    this.rootView = rootView;
    this.activitylogsList = activitylogsList;
    this.bluetoothIc = bluetoothIc;
    this.connectBtn = connectBtn;
    this.connectedPanel = connectedPanel;
    this.courseBackupsList = courseBackupsList;
    this.notConnectedInfo = notConnectedInfo;
    this.permissionsExplanation = permissionsExplanation;
    this.progressBar6 = progressBar6;
    this.receivingProgress = receivingProgress;
    this.sendAllButton = sendAllButton;
    this.sendTransferProgress = sendTransferProgress;
    this.statusSubtitle = statusSubtitle;
    this.statusTitle = statusTitle;
    this.tabsFilter = tabsFilter;
    this.tetheringBtn = tetheringBtn;
    this.textView21 = textView21;
    this.textView25 = textView25;
    this.textView27 = textView27;
    this.toolbar = toolbar;
    this.transferPendingFiles = transferPendingFiles;
    this.transferPendingSize = transferPendingSize;
    this.tvDeviceName = tvDeviceName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySyncBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySyncBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_sync, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySyncBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activitylogs_list;
      RecyclerView activitylogsList = ViewBindings.findChildViewById(rootView, id);
      if (activitylogsList == null) {
        break missingId;
      }

      id = R.id.bluetooth_ic;
      AppCompatImageView bluetoothIc = ViewBindings.findChildViewById(rootView, id);
      if (bluetoothIc == null) {
        break missingId;
      }

      id = R.id.connect_btn;
      Button connectBtn = ViewBindings.findChildViewById(rootView, id);
      if (connectBtn == null) {
        break missingId;
      }

      id = R.id.connected_panel;
      LinearLayout connectedPanel = ViewBindings.findChildViewById(rootView, id);
      if (connectedPanel == null) {
        break missingId;
      }

      id = R.id.course_backups_list;
      RecyclerView courseBackupsList = ViewBindings.findChildViewById(rootView, id);
      if (courseBackupsList == null) {
        break missingId;
      }

      id = R.id.not_connected_info;
      RelativeLayout notConnectedInfo = ViewBindings.findChildViewById(rootView, id);
      if (notConnectedInfo == null) {
        break missingId;
      }

      id = R.id.permissions_explanation;
      FrameLayout permissionsExplanation = ViewBindings.findChildViewById(rootView, id);
      if (permissionsExplanation == null) {
        break missingId;
      }

      id = R.id.progressBar6;
      ProgressBar progressBar6 = ViewBindings.findChildViewById(rootView, id);
      if (progressBar6 == null) {
        break missingId;
      }

      id = R.id.receiving_progress;
      RelativeLayout receivingProgress = ViewBindings.findChildViewById(rootView, id);
      if (receivingProgress == null) {
        break missingId;
      }

      id = R.id.send_all_button;
      Button sendAllButton = ViewBindings.findChildViewById(rootView, id);
      if (sendAllButton == null) {
        break missingId;
      }

      id = R.id.send_transfer_progress;
      ProgressBar sendTransferProgress = ViewBindings.findChildViewById(rootView, id);
      if (sendTransferProgress == null) {
        break missingId;
      }

      id = R.id.status_subtitle;
      TextView statusSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (statusSubtitle == null) {
        break missingId;
      }

      id = R.id.status_title;
      TextView statusTitle = ViewBindings.findChildViewById(rootView, id);
      if (statusTitle == null) {
        break missingId;
      }

      id = R.id.tabs_filter;
      TabLayout tabsFilter = ViewBindings.findChildViewById(rootView, id);
      if (tabsFilter == null) {
        break missingId;
      }

      id = R.id.tethering_btn;
      ImageButton tetheringBtn = ViewBindings.findChildViewById(rootView, id);
      if (tetheringBtn == null) {
        break missingId;
      }

      id = R.id.textView21;
      TextView textView21 = ViewBindings.findChildViewById(rootView, id);
      if (textView21 == null) {
        break missingId;
      }

      id = R.id.textView25;
      TextView textView25 = ViewBindings.findChildViewById(rootView, id);
      if (textView25 == null) {
        break missingId;
      }

      id = R.id.textView27;
      TextView textView27 = ViewBindings.findChildViewById(rootView, id);
      if (textView27 == null) {
        break missingId;
      }

      id = R.id.toolbar;
      View toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }
      ToolbarBinding binding_toolbar = ToolbarBinding.bind(toolbar);

      id = R.id.transfer_pending_files;
      TextView transferPendingFiles = ViewBindings.findChildViewById(rootView, id);
      if (transferPendingFiles == null) {
        break missingId;
      }

      id = R.id.transfer_pending_size;
      TextView transferPendingSize = ViewBindings.findChildViewById(rootView, id);
      if (transferPendingSize == null) {
        break missingId;
      }

      id = R.id.tv_device_name;
      TextView tvDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceName == null) {
        break missingId;
      }

      return new ActivitySyncBinding((LinearLayout) rootView, activitylogsList, bluetoothIc,
          connectBtn, connectedPanel, courseBackupsList, notConnectedInfo, permissionsExplanation,
          progressBar6, receivingProgress, sendAllButton, sendTransferProgress, statusSubtitle,
          statusTitle, tabsFilter, tetheringBtn, textView21, textView25, textView27,
          binding_toolbar, transferPendingFiles, transferPendingSize, tvDeviceName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
